// Package warehouse provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package warehouse

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// WarehouseProduct defines model for WarehouseProduct.
type WarehouseProduct struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Price       float32 `json:"price"`
	ProductID   string  `json:"product_id"`
	Quantity    int     `json:"quantity"`
}

// WarehouseProductRequest defines model for WarehouseProductRequest.
type WarehouseProductRequest struct {
	Description string  `json:"description"`
	Name        string  `json:"name"`
	Price       float32 `json:"price"`
	Quantity    int     `json:"quantity"`
}

// WarehouseProductUpdate defines model for WarehouseProductUpdate.
type WarehouseProductUpdate struct {
	Description *string  `json:"description,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Price       *float32 `json:"price,omitempty"`
	Quantity    *int     `json:"quantity,omitempty"`
}

// PostWarehouseJSONRequestBody defines body for PostWarehouse for application/json ContentType.
type PostWarehouseJSONRequestBody = WarehouseProductRequest

// PatchWarehouseProductIdJSONRequestBody defines body for PatchWarehouseProductId for application/json ContentType.
type PatchWarehouseProductIdJSONRequestBody = WarehouseProductUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all warehouse products
	// (GET /warehouse)
	GetWarehouse(ctx echo.Context) error
	// Create a new warehouse product
	// (POST /warehouse)
	PostWarehouse(ctx echo.Context) error
	// Delete product
	// (DELETE /warehouse/{product_id})
	DeleteWarehouseProductId(ctx echo.Context, productId string) error
	// Get product by ID
	// (GET /warehouse/{product_id})
	GetWarehouseProductId(ctx echo.Context, productId string) error
	// Update product parameters
	// (PATCH /warehouse/{product_id})
	PatchWarehouseProductId(ctx echo.Context, productId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetWarehouse converts echo context to params.
func (w *ServerInterfaceWrapper) GetWarehouse(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWarehouse(ctx)
	return err
}

// PostWarehouse converts echo context to params.
func (w *ServerInterfaceWrapper) PostWarehouse(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWarehouse(ctx)
	return err
}

// DeleteWarehouseProductId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWarehouseProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "product_id", runtime.ParamLocationPath, ctx.Param("product_id"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWarehouseProductId(ctx, productId)
	return err
}

// GetWarehouseProductId converts echo context to params.
func (w *ServerInterfaceWrapper) GetWarehouseProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "product_id", runtime.ParamLocationPath, ctx.Param("product_id"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWarehouseProductId(ctx, productId)
	return err
}

// PatchWarehouseProductId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchWarehouseProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "product_id", runtime.ParamLocationPath, ctx.Param("product_id"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchWarehouseProductId(ctx, productId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/warehouse", wrapper.GetWarehouse)
	router.POST(baseURL+"/warehouse", wrapper.PostWarehouse)
	router.DELETE(baseURL+"/warehouse/:product_id", wrapper.DeleteWarehouseProductId)
	router.GET(baseURL+"/warehouse/:product_id", wrapper.GetWarehouseProductId)
	router.PATCH(baseURL+"/warehouse/:product_id", wrapper.PatchWarehouseProductId)

}

type GetWarehouseRequestObject struct {
}

type GetWarehouseResponseObject interface {
	VisitGetWarehouseResponse(w http.ResponseWriter) error
}

type GetWarehouse200JSONResponse []WarehouseProduct

func (response GetWarehouse200JSONResponse) VisitGetWarehouseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostWarehouseRequestObject struct {
	Body *PostWarehouseJSONRequestBody
}

type PostWarehouseResponseObject interface {
	VisitPostWarehouseResponse(w http.ResponseWriter) error
}

type PostWarehouse201JSONResponse WarehouseProduct

func (response PostWarehouse201JSONResponse) VisitPostWarehouseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostWarehouse400Response struct {
}

func (response PostWarehouse400Response) VisitPostWarehouseResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteWarehouseProductIdRequestObject struct {
	ProductId string `json:"product_id"`
}

type DeleteWarehouseProductIdResponseObject interface {
	VisitDeleteWarehouseProductIdResponse(w http.ResponseWriter) error
}

type DeleteWarehouseProductId204Response struct {
}

func (response DeleteWarehouseProductId204Response) VisitDeleteWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWarehouseProductId404Response struct {
}

func (response DeleteWarehouseProductId404Response) VisitDeleteWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetWarehouseProductIdRequestObject struct {
	ProductId string `json:"product_id"`
}

type GetWarehouseProductIdResponseObject interface {
	VisitGetWarehouseProductIdResponse(w http.ResponseWriter) error
}

type GetWarehouseProductId200JSONResponse WarehouseProduct

func (response GetWarehouseProductId200JSONResponse) VisitGetWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWarehouseProductId404Response struct {
}

func (response GetWarehouseProductId404Response) VisitGetWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchWarehouseProductIdRequestObject struct {
	ProductId string `json:"product_id"`
	Body      *PatchWarehouseProductIdJSONRequestBody
}

type PatchWarehouseProductIdResponseObject interface {
	VisitPatchWarehouseProductIdResponse(w http.ResponseWriter) error
}

type PatchWarehouseProductId200JSONResponse WarehouseProduct

func (response PatchWarehouseProductId200JSONResponse) VisitPatchWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchWarehouseProductId400Response struct {
}

func (response PatchWarehouseProductId400Response) VisitPatchWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PatchWarehouseProductId404Response struct {
}

func (response PatchWarehouseProductId404Response) VisitPatchWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all warehouse products
	// (GET /warehouse)
	GetWarehouse(ctx context.Context, request GetWarehouseRequestObject) (GetWarehouseResponseObject, error)
	// Create a new warehouse product
	// (POST /warehouse)
	PostWarehouse(ctx context.Context, request PostWarehouseRequestObject) (PostWarehouseResponseObject, error)
	// Delete product
	// (DELETE /warehouse/{product_id})
	DeleteWarehouseProductId(ctx context.Context, request DeleteWarehouseProductIdRequestObject) (DeleteWarehouseProductIdResponseObject, error)
	// Get product by ID
	// (GET /warehouse/{product_id})
	GetWarehouseProductId(ctx context.Context, request GetWarehouseProductIdRequestObject) (GetWarehouseProductIdResponseObject, error)
	// Update product parameters
	// (PATCH /warehouse/{product_id})
	PatchWarehouseProductId(ctx context.Context, request PatchWarehouseProductIdRequestObject) (PatchWarehouseProductIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetWarehouse operation middleware
func (sh *strictHandler) GetWarehouse(ctx echo.Context) error {
	var request GetWarehouseRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWarehouse(ctx.Request().Context(), request.(GetWarehouseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWarehouse")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetWarehouseResponseObject); ok {
		return validResponse.VisitGetWarehouseResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostWarehouse operation middleware
func (sh *strictHandler) PostWarehouse(ctx echo.Context) error {
	var request PostWarehouseRequestObject

	var body PostWarehouseJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostWarehouse(ctx.Request().Context(), request.(PostWarehouseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostWarehouse")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostWarehouseResponseObject); ok {
		return validResponse.VisitPostWarehouseResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteWarehouseProductId operation middleware
func (sh *strictHandler) DeleteWarehouseProductId(ctx echo.Context, productId string) error {
	var request DeleteWarehouseProductIdRequestObject

	request.ProductId = productId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWarehouseProductId(ctx.Request().Context(), request.(DeleteWarehouseProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteWarehouseProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteWarehouseProductIdResponseObject); ok {
		return validResponse.VisitDeleteWarehouseProductIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetWarehouseProductId operation middleware
func (sh *strictHandler) GetWarehouseProductId(ctx echo.Context, productId string) error {
	var request GetWarehouseProductIdRequestObject

	request.ProductId = productId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWarehouseProductId(ctx.Request().Context(), request.(GetWarehouseProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWarehouseProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetWarehouseProductIdResponseObject); ok {
		return validResponse.VisitGetWarehouseProductIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchWarehouseProductId operation middleware
func (sh *strictHandler) PatchWarehouseProductId(ctx echo.Context, productId string) error {
	var request PatchWarehouseProductIdRequestObject

	request.ProductId = productId

	var body PatchWarehouseProductIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchWarehouseProductId(ctx.Request().Context(), request.(PatchWarehouseProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchWarehouseProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchWarehouseProductIdResponseObject); ok {
		return validResponse.VisitPatchWarehouseProductIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
