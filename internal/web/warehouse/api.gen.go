// Package warehouse provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package warehouse

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// AddProductToCartRequest defines model for AddProductToCartRequest.
type AddProductToCartRequest struct {
	productID string `json:"product_id"`
	Quantity  int    `json:"quantity"`
	userID    string `json:"user_id"`
}

// CartItem defines model for CartItem.
type CartItem struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Price       float32 `json:"price"`
	productID   string  `json:"product_id"`
	Quantity    int     `json:"quantity"`
}

// CartItemUpdateRequest defines model for CartItemUpdateRequest.
type CartItemUpdateRequest struct {
	productID *string `json:"product_id,omitempty"`
	Quantity  int     `json:"quantity"`
}

// ConfirmOrder defines model for ConfirmOrder.
type ConfirmOrder struct {
	Confirm bool   `json:"confirm"`
	userID  string `json:"user_id"`
}

// Order defines model for Order.
type Order struct {
	CartItems []CartItem `json:"cart_items"`
	CreatedAt time.Time  `json:"created_at"`
	orderID   string     `json:"order_id"`
}

// WarehouseProduct defines model for WarehouseProduct.
type WarehouseProduct struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Price       float32 `json:"price"`
	productID   string  `json:"product_id"`
	Quantity    int     `json:"quantity"`
}

// WarehouseProductRequest defines model for WarehouseProductRequest.
type WarehouseProductRequest struct {
	Description string  `json:"description"`
	Name        string  `json:"name"`
	Price       float32 `json:"price"`
	Quantity    int     `json:"quantity"`
}

// WarehouseProductUpdate defines model for WarehouseProductUpdate.
type WarehouseProductUpdate struct {
	Description *string  `json:"description,omitempty"`
	Name        *string  `json:"name,omitempty"`
	Price       *float32 `json:"price,omitempty"`
	Quantity    *int     `json:"quantity,omitempty"`
}

// PostUsersUserIdCartsJSONRequestBody defines body for PostUsersUserIdCarts for application/json ContentType.
type PostUsersUserIdCartsJSONRequestBody = AddProductToCartRequest

// PatchUsersUserIdCartsProductIdJSONRequestBody defines body for PatchUsersUserIdCartsProductId for application/json ContentType.
type PatchUsersUserIdCartsProductIdJSONRequestBody = CartItemUpdateRequest

// PostUsersUserIdOrdersJSONRequestBody defines body for PostUsersUserIdOrders for application/json ContentType.
type PostUsersUserIdOrdersJSONRequestBody = ConfirmOrder

// PostWarehouseJSONRequestBody defines body for PostWarehouse for application/json ContentType.
type PostWarehouseJSONRequestBody = WarehouseProductRequest

// PatchWarehouseProductIdJSONRequestBody defines body for PatchWarehouseProductId for application/json ContentType.
type PatchWarehouseProductIdJSONRequestBody = WarehouseProductUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all user`s cart products
	// (GET /users/{user_id}/carts)
	GetUsersUserIdCarts(ctx echo.Context, userId string) error
	// Add product to cart
	// (POST /users/{user_id}/carts)
	PostUsersUserIdCarts(ctx echo.Context, userId string) error
	// Delete product from cart
	// (DELETE /users/{user_id}/carts/{product_id})
	DeleteUsersUserIdCartsProductId(ctx echo.Context, userId string, productId string) error
	// Update cart-item quantity
	// (PATCH /users/{user_id}/carts/{product_id})
	PatchUsersUserIdCartsProductId(ctx echo.Context, userId string, productId string) error
	// Get all user`s orders
	// (GET /users/{user_id}/orders)
	GetUsersUserIdOrders(ctx echo.Context, userId string) error
	// Order from cart
	// (POST /users/{user_id}/orders)
	PostUsersUserIdOrders(ctx echo.Context, userId string) error
	// Get all warehouse products
	// (GET /warehouse)
	GetWarehouse(ctx echo.Context) error
	// Create a new warehouse product
	// (POST /warehouse)
	PostWarehouse(ctx echo.Context) error
	// Delete product
	// (DELETE /warehouse/{product_id})
	DeleteWarehouseProductId(ctx echo.Context, productId string) error
	// Get product by ID
	// (GET /warehouse/{product_id})
	GetWarehouseProductId(ctx echo.Context, productId string) error
	// Update product parameters
	// (PATCH /warehouse/{product_id})
	PatchWarehouseProductId(ctx echo.Context, productId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUsersUserIdCarts converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdCarts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdCarts(ctx, userId)
	return err
}

// PostUsersUserIdCarts converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdCarts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUserIdCarts(ctx, userId)
	return err
}

// DeleteUsersUserIdCartsProductId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserIdCartsProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "product_id", runtime.ParamLocationPath, ctx.Param("product_id"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersUserIdCartsProductId(ctx, userId, productId)
	return err
}

// PatchUsersUserIdCartsProductId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersUserIdCartsProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "product_id", runtime.ParamLocationPath, ctx.Param("product_id"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUsersUserIdCartsProductId(ctx, userId, productId)
	return err
}

// GetUsersUserIdOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdOrders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdOrders(ctx, userId)
	return err
}

// PostUsersUserIdOrders converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdOrders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUserIdOrders(ctx, userId)
	return err
}

// GetWarehouse converts echo context to params.
func (w *ServerInterfaceWrapper) GetWarehouse(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWarehouse(ctx)
	return err
}

// PostWarehouse converts echo context to params.
func (w *ServerInterfaceWrapper) PostWarehouse(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWarehouse(ctx)
	return err
}

// DeleteWarehouseProductId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWarehouseProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "product_id", runtime.ParamLocationPath, ctx.Param("product_id"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWarehouseProductId(ctx, productId)
	return err
}

// GetWarehouseProductId converts echo context to params.
func (w *ServerInterfaceWrapper) GetWarehouseProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "product_id", runtime.ParamLocationPath, ctx.Param("product_id"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWarehouseProductId(ctx, productId)
	return err
}

// PatchWarehouseProductId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchWarehouseProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "product_id", runtime.ParamLocationPath, ctx.Param("product_id"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchWarehouseProductId(ctx, productId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/users/:user_id/carts", wrapper.GetUsersUserIdCarts)
	router.POST(baseURL+"/users/:user_id/carts", wrapper.PostUsersUserIdCarts)
	router.DELETE(baseURL+"/users/:user_id/carts/:product_id", wrapper.DeleteUsersUserIdCartsProductId)
	router.PATCH(baseURL+"/users/:user_id/carts/:product_id", wrapper.PatchUsersUserIdCartsProductId)
	router.GET(baseURL+"/users/:user_id/orders", wrapper.GetUsersUserIdOrders)
	router.POST(baseURL+"/users/:user_id/orders", wrapper.PostUsersUserIdOrders)
	router.GET(baseURL+"/warehouse", wrapper.GetWarehouse)
	router.POST(baseURL+"/warehouse", wrapper.PostWarehouse)
	router.DELETE(baseURL+"/warehouse/:product_id", wrapper.DeleteWarehouseProductId)
	router.GET(baseURL+"/warehouse/:product_id", wrapper.GetWarehouseProductId)
	router.PATCH(baseURL+"/warehouse/:product_id", wrapper.PatchWarehouseProductId)

}

type GetUsersUserIdCartsRequestObject struct {
	UserId string `json:"user_id"`
}

type GetUsersUserIdCartsResponseObject interface {
	VisitGetUsersUserIdCartsResponse(w http.ResponseWriter) error
}

type GetUsersUserIdCarts200JSONResponse []CartItem

func (response GetUsersUserIdCarts200JSONResponse) VisitGetUsersUserIdCartsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUserIdCarts404Response struct {
}

func (response GetUsersUserIdCarts404Response) VisitGetUsersUserIdCartsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostUsersUserIdCartsRequestObject struct {
	UserId string `json:"user_id"`
	Body   *PostUsersUserIdCartsJSONRequestBody
}

type PostUsersUserIdCartsResponseObject interface {
	VisitPostUsersUserIdCartsResponse(w http.ResponseWriter) error
}

type PostUsersUserIdCarts201JSONResponse CartItem

func (response PostUsersUserIdCarts201JSONResponse) VisitPostUsersUserIdCartsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersUserIdCarts404Response struct {
}

func (response PostUsersUserIdCarts404Response) VisitPostUsersUserIdCartsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteUsersUserIdCartsProductIdRequestObject struct {
	UserId    string `json:"user_id"`
	ProductId string `json:"product_id"`
}

type DeleteUsersUserIdCartsProductIdResponseObject interface {
	VisitDeleteUsersUserIdCartsProductIdResponse(w http.ResponseWriter) error
}

type DeleteUsersUserIdCartsProductId204Response struct {
}

func (response DeleteUsersUserIdCartsProductId204Response) VisitDeleteUsersUserIdCartsProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersUserIdCartsProductId404Response struct {
}

func (response DeleteUsersUserIdCartsProductId404Response) VisitDeleteUsersUserIdCartsProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchUsersUserIdCartsProductIdRequestObject struct {
	UserId    string `json:"user_id"`
	ProductId string `json:"product_id"`
	Body      *PatchUsersUserIdCartsProductIdJSONRequestBody
}

type PatchUsersUserIdCartsProductIdResponseObject interface {
	VisitPatchUsersUserIdCartsProductIdResponse(w http.ResponseWriter) error
}

type PatchUsersUserIdCartsProductId200JSONResponse CartItem

func (response PatchUsersUserIdCartsProductId200JSONResponse) VisitPatchUsersUserIdCartsProductIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUserIdOrdersRequestObject struct {
	UserId string `json:"user_id"`
}

type GetUsersUserIdOrdersResponseObject interface {
	VisitGetUsersUserIdOrdersResponse(w http.ResponseWriter) error
}

type GetUsersUserIdOrders200JSONResponse []Order

func (response GetUsersUserIdOrders200JSONResponse) VisitGetUsersUserIdOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUserIdOrders404Response struct {
}

func (response GetUsersUserIdOrders404Response) VisitGetUsersUserIdOrdersResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostUsersUserIdOrdersRequestObject struct {
	UserId string `json:"user_id"`
	Body   *PostUsersUserIdOrdersJSONRequestBody
}

type PostUsersUserIdOrdersResponseObject interface {
	VisitPostUsersUserIdOrdersResponse(w http.ResponseWriter) error
}

type PostUsersUserIdOrders201JSONResponse Order

func (response PostUsersUserIdOrders201JSONResponse) VisitPostUsersUserIdOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersUserIdOrders400Response struct {
}

func (response PostUsersUserIdOrders400Response) VisitPostUsersUserIdOrdersResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostUsersUserIdOrders404Response struct {
}

func (response PostUsersUserIdOrders404Response) VisitPostUsersUserIdOrdersResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetWarehouseRequestObject struct {
}

type GetWarehouseResponseObject interface {
	VisitGetWarehouseResponse(w http.ResponseWriter) error
}

type GetWarehouse200JSONResponse []WarehouseProduct

func (response GetWarehouse200JSONResponse) VisitGetWarehouseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostWarehouseRequestObject struct {
	Body *PostWarehouseJSONRequestBody
}

type PostWarehouseResponseObject interface {
	VisitPostWarehouseResponse(w http.ResponseWriter) error
}

type PostWarehouse201JSONResponse WarehouseProduct

func (response PostWarehouse201JSONResponse) VisitPostWarehouseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostWarehouse400Response struct {
}

func (response PostWarehouse400Response) VisitPostWarehouseResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteWarehouseProductIdRequestObject struct {
	ProductId string `json:"product_id"`
}

type DeleteWarehouseProductIdResponseObject interface {
	VisitDeleteWarehouseProductIdResponse(w http.ResponseWriter) error
}

type DeleteWarehouseProductId204Response struct {
}

func (response DeleteWarehouseProductId204Response) VisitDeleteWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteWarehouseProductId404Response struct {
}

func (response DeleteWarehouseProductId404Response) VisitDeleteWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetWarehouseProductIdRequestObject struct {
	ProductId string `json:"product_id"`
}

type GetWarehouseProductIdResponseObject interface {
	VisitGetWarehouseProductIdResponse(w http.ResponseWriter) error
}

type GetWarehouseProductId200JSONResponse WarehouseProduct

func (response GetWarehouseProductId200JSONResponse) VisitGetWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWarehouseProductId404Response struct {
}

func (response GetWarehouseProductId404Response) VisitGetWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchWarehouseProductIdRequestObject struct {
	ProductId string `json:"product_id"`
	Body      *PatchWarehouseProductIdJSONRequestBody
}

type PatchWarehouseProductIdResponseObject interface {
	VisitPatchWarehouseProductIdResponse(w http.ResponseWriter) error
}

type PatchWarehouseProductId200JSONResponse WarehouseProduct

func (response PatchWarehouseProductId200JSONResponse) VisitPatchWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchWarehouseProductId404Response struct {
}

func (response PatchWarehouseProductId404Response) VisitPatchWarehouseProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all user`s cart products
	// (GET /users/{user_id}/carts)
	GetUsersUserIdCarts(ctx context.Context, request GetUsersUserIdCartsRequestObject) (GetUsersUserIdCartsResponseObject, error)
	// Add product to cart
	// (POST /users/{user_id}/carts)
	PostUsersUserIdCarts(ctx context.Context, request PostUsersUserIdCartsRequestObject) (PostUsersUserIdCartsResponseObject, error)
	// Delete product from cart
	// (DELETE /users/{user_id}/carts/{product_id})
	DeleteUsersUserIdCartsProductId(ctx context.Context, request DeleteUsersUserIdCartsProductIdRequestObject) (DeleteUsersUserIdCartsProductIdResponseObject, error)
	// Update cart-item quantity
	// (PATCH /users/{user_id}/carts/{product_id})
	PatchUsersUserIdCartsProductId(ctx context.Context, request PatchUsersUserIdCartsProductIdRequestObject) (PatchUsersUserIdCartsProductIdResponseObject, error)
	// Get all user`s orders
	// (GET /users/{user_id}/orders)
	GetUsersUserIdOrders(ctx context.Context, request GetUsersUserIdOrdersRequestObject) (GetUsersUserIdOrdersResponseObject, error)
	// Order from cart
	// (POST /users/{user_id}/orders)
	PostUsersUserIdOrders(ctx context.Context, request PostUsersUserIdOrdersRequestObject) (PostUsersUserIdOrdersResponseObject, error)
	// Get all warehouse products
	// (GET /warehouse)
	GetWarehouse(ctx context.Context, request GetWarehouseRequestObject) (GetWarehouseResponseObject, error)
	// Create a new warehouse product
	// (POST /warehouse)
	PostWarehouse(ctx context.Context, request PostWarehouseRequestObject) (PostWarehouseResponseObject, error)
	// Delete product
	// (DELETE /warehouse/{product_id})
	DeleteWarehouseProductId(ctx context.Context, request DeleteWarehouseProductIdRequestObject) (DeleteWarehouseProductIdResponseObject, error)
	// Get product by ID
	// (GET /warehouse/{product_id})
	GetWarehouseProductId(ctx context.Context, request GetWarehouseProductIdRequestObject) (GetWarehouseProductIdResponseObject, error)
	// Update product parameters
	// (PATCH /warehouse/{product_id})
	PatchWarehouseProductId(ctx context.Context, request PatchWarehouseProductIdRequestObject) (PatchWarehouseProductIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetUsersUserIdCarts operation middleware
func (sh *strictHandler) GetUsersUserIdCarts(ctx echo.Context, userId string) error {
	var request GetUsersUserIdCartsRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersUserIdCarts(ctx.Request().Context(), request.(GetUsersUserIdCartsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersUserIdCarts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersUserIdCartsResponseObject); ok {
		return validResponse.VisitGetUsersUserIdCartsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUsersUserIdCarts operation middleware
func (sh *strictHandler) PostUsersUserIdCarts(ctx echo.Context, userId string) error {
	var request PostUsersUserIdCartsRequestObject

	request.UserId = userId

	var body PostUsersUserIdCartsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersUserIdCarts(ctx.Request().Context(), request.(PostUsersUserIdCartsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersUserIdCarts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersUserIdCartsResponseObject); ok {
		return validResponse.VisitPostUsersUserIdCartsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersUserIdCartsProductId operation middleware
func (sh *strictHandler) DeleteUsersUserIdCartsProductId(ctx echo.Context, userId string, productId string) error {
	var request DeleteUsersUserIdCartsProductIdRequestObject

	request.UserId = userId
	request.ProductId = productId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersUserIdCartsProductId(ctx.Request().Context(), request.(DeleteUsersUserIdCartsProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersUserIdCartsProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersUserIdCartsProductIdResponseObject); ok {
		return validResponse.VisitDeleteUsersUserIdCartsProductIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchUsersUserIdCartsProductId operation middleware
func (sh *strictHandler) PatchUsersUserIdCartsProductId(ctx echo.Context, userId string, productId string) error {
	var request PatchUsersUserIdCartsProductIdRequestObject

	request.UserId = userId
	request.ProductId = productId

	var body PatchUsersUserIdCartsProductIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchUsersUserIdCartsProductId(ctx.Request().Context(), request.(PatchUsersUserIdCartsProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchUsersUserIdCartsProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchUsersUserIdCartsProductIdResponseObject); ok {
		return validResponse.VisitPatchUsersUserIdCartsProductIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsersUserIdOrders operation middleware
func (sh *strictHandler) GetUsersUserIdOrders(ctx echo.Context, userId string) error {
	var request GetUsersUserIdOrdersRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersUserIdOrders(ctx.Request().Context(), request.(GetUsersUserIdOrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersUserIdOrders")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersUserIdOrdersResponseObject); ok {
		return validResponse.VisitGetUsersUserIdOrdersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUsersUserIdOrders operation middleware
func (sh *strictHandler) PostUsersUserIdOrders(ctx echo.Context, userId string) error {
	var request PostUsersUserIdOrdersRequestObject

	request.UserId = userId

	var body PostUsersUserIdOrdersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersUserIdOrders(ctx.Request().Context(), request.(PostUsersUserIdOrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersUserIdOrders")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersUserIdOrdersResponseObject); ok {
		return validResponse.VisitPostUsersUserIdOrdersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetWarehouse operation middleware
func (sh *strictHandler) GetWarehouse(ctx echo.Context) error {
	var request GetWarehouseRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWarehouse(ctx.Request().Context(), request.(GetWarehouseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWarehouse")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetWarehouseResponseObject); ok {
		return validResponse.VisitGetWarehouseResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostWarehouse operation middleware
func (sh *strictHandler) PostWarehouse(ctx echo.Context) error {
	var request PostWarehouseRequestObject

	var body PostWarehouseJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostWarehouse(ctx.Request().Context(), request.(PostWarehouseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostWarehouse")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostWarehouseResponseObject); ok {
		return validResponse.VisitPostWarehouseResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteWarehouseProductId operation middleware
func (sh *strictHandler) DeleteWarehouseProductId(ctx echo.Context, productId string) error {
	var request DeleteWarehouseProductIdRequestObject

	request.ProductId = productId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteWarehouseProductId(ctx.Request().Context(), request.(DeleteWarehouseProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteWarehouseProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteWarehouseProductIdResponseObject); ok {
		return validResponse.VisitDeleteWarehouseProductIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetWarehouseProductId operation middleware
func (sh *strictHandler) GetWarehouseProductId(ctx echo.Context, productId string) error {
	var request GetWarehouseProductIdRequestObject

	request.ProductId = productId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetWarehouseProductId(ctx.Request().Context(), request.(GetWarehouseProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWarehouseProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetWarehouseProductIdResponseObject); ok {
		return validResponse.VisitGetWarehouseProductIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchWarehouseProductId operation middleware
func (sh *strictHandler) PatchWarehouseProductId(ctx echo.Context, productId string) error {
	var request PatchWarehouseProductIdRequestObject

	request.ProductId = productId

	var body PatchWarehouseProductIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchWarehouseProductId(ctx.Request().Context(), request.(PatchWarehouseProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchWarehouseProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchWarehouseProductIdResponseObject); ok {
		return validResponse.VisitPatchWarehouseProductIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
