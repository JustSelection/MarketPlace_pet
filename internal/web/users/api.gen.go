// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package users

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// AddProductToCartRequest defines model for AddProductToCartRequest.
type AddProductToCartRequest struct {
	ProductID string `json:"product_id"`
	Quantity  int    `json:"quantity"`
	UserID    string `json:"user_id"`
}

// CartItem defines model for CartItem.
type CartItem struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
	Price       float32 `json:"price"`
	ProductID   string  `json:"product_id"`
	Quantity    int     `json:"quantity"`
}

// CartItemUpdateRequest defines model for CartItemUpdateRequest.
type CartItemUpdateRequest struct {
	ProductID *string `json:"product_id,omitempty"`
	Quantity  int     `json:"quantity"`
}

// ConfirmOrder defines model for ConfirmOrder.
type ConfirmOrder struct {
	Confirm bool   `json:"confirm"`
	UserID  string `json:"user_id"`
}

// Order defines model for Order.
type Order struct {
	CartItems *[]CartItem `json:"cart_items,omitempty"`
	CreatedAt time.Time   `json:"created_at"`
	OrderID   string      `json:"order_id"`
}

// OrderItem defines model for OrderItem.
type OrderItem struct {
	OrderId   string  `json:"order_id"`
	Price     float32 `json:"price"`
	ProductId string  `json:"product_id"`
	Quantity  int     `json:"quantity"`
	UserId    string  `json:"user_id"`
}

// User defines model for User.
type User struct {
	Email  string `json:"email"`
	UserID string `json:"user_id"`
}

// UserDetails defines model for UserDetails.
type UserDetails struct {
	Email       string `json:"email"`
	Information string `json:"information"`
	Name        string `json:"name"`
	Password    string `json:"password"`
	UserID      string `json:"user_id"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	Email       string `json:"email"`
	Information string `json:"information"`
	Name        string `json:"name"`
	Password    string `json:"password"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	Email       *string `json:"email,omitempty"`
	Information *string `json:"information,omitempty"`
	Name        *string `json:"name,omitempty"`
	Password    *string `json:"password,omitempty"`
}

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserRequest

// PatchUsersUserIdJSONRequestBody defines body for PatchUsersUserId for application/json ContentType.
type PatchUsersUserIdJSONRequestBody = UserUpdate

// PostUsersUserIdCartsJSONRequestBody defines body for PostUsersUserIdCarts for application/json ContentType.
type PostUsersUserIdCartsJSONRequestBody = AddProductToCartRequest

// PatchUsersUserIdCartsProductIdJSONRequestBody defines body for PatchUsersUserIdCartsProductId for application/json ContentType.
type PatchUsersUserIdCartsProductIdJSONRequestBody = CartItemUpdateRequest

// PostUsersUserIdOrdersJSONRequestBody defines body for PostUsersUserIdOrders for application/json ContentType.
type PostUsersUserIdOrdersJSONRequestBody = ConfirmOrder

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all users
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// Create a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// Delete user by ID
	// (DELETE /users/{user_id})
	DeleteUsersUserId(ctx echo.Context, userId string) error
	// Get user by ID
	// (GET /users/{user_id})
	GetUsersUserId(ctx echo.Context, userId string) error
	// Update user by ID
	// (PATCH /users/{user_id})
	PatchUsersUserId(ctx echo.Context, userId string) error
	// Get all user`s cart products
	// (GET /users/{user_id}/carts)
	GetUsersUserIdCarts(ctx echo.Context, userId string) error
	// Add product to cart
	// (POST /users/{user_id}/carts)
	PostUsersUserIdCarts(ctx echo.Context, userId string) error
	// Delete product from cart
	// (DELETE /users/{user_id}/carts/{product_id})
	DeleteUsersUserIdCartsProductId(ctx echo.Context, userId string, productId string) error
	// Update cart-item quantity
	// (PATCH /users/{user_id}/carts/{product_id})
	PatchUsersUserIdCartsProductId(ctx echo.Context, userId string, productId string) error
	// Get all user`s orders
	// (GET /users/{user_id}/orders)
	GetUsersUserIdOrders(ctx echo.Context, userId string) error
	// Order from cart
	// (POST /users/{user_id}/orders)
	PostUsersUserIdOrders(ctx echo.Context, userId string) error
	// Get order by ID
	// (GET /users/{user_id}/orders/{order_id})
	GetUsersUserIdOrdersOrderId(ctx echo.Context, userId string, orderId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersUserId(ctx, userId)
	return err
}

// GetUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserId(ctx, userId)
	return err
}

// PatchUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUsersUserId(ctx, userId)
	return err
}

// GetUsersUserIdCarts converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdCarts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdCarts(ctx, userId)
	return err
}

// PostUsersUserIdCarts converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdCarts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUserIdCarts(ctx, userId)
	return err
}

// DeleteUsersUserIdCartsProductId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserIdCartsProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "product_id", runtime.ParamLocationPath, ctx.Param("product_id"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersUserIdCartsProductId(ctx, userId, productId)
	return err
}

// PatchUsersUserIdCartsProductId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersUserIdCartsProductId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "product_id" -------------
	var productId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "product_id", runtime.ParamLocationPath, ctx.Param("product_id"), &productId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter product_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUsersUserIdCartsProductId(ctx, userId, productId)
	return err
}

// GetUsersUserIdOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdOrders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdOrders(ctx, userId)
	return err
}

// PostUsersUserIdOrders converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUserIdOrders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUserIdOrders(ctx, userId)
	return err
}

// GetUsersUserIdOrdersOrderId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserIdOrdersOrderId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "order_id" -------------
	var orderId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "order_id", runtime.ParamLocationPath, ctx.Param("order_id"), &orderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserIdOrdersOrderId(ctx, userId, orderId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:user_id", wrapper.DeleteUsersUserId)
	router.GET(baseURL+"/users/:user_id", wrapper.GetUsersUserId)
	router.PATCH(baseURL+"/users/:user_id", wrapper.PatchUsersUserId)
	router.GET(baseURL+"/users/:user_id/carts", wrapper.GetUsersUserIdCarts)
	router.POST(baseURL+"/users/:user_id/carts", wrapper.PostUsersUserIdCarts)
	router.DELETE(baseURL+"/users/:user_id/carts/:product_id", wrapper.DeleteUsersUserIdCartsProductId)
	router.PATCH(baseURL+"/users/:user_id/carts/:product_id", wrapper.PatchUsersUserIdCartsProductId)
	router.GET(baseURL+"/users/:user_id/orders", wrapper.GetUsersUserIdOrders)
	router.POST(baseURL+"/users/:user_id/orders", wrapper.PostUsersUserIdOrders)
	router.GET(baseURL+"/users/:user_id/orders/:order_id", wrapper.GetUsersUserIdOrdersOrderId)

}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse []User

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersRequestObject struct {
	Body *PostUsersJSONRequestBody
}

type PostUsersResponseObject interface {
	VisitPostUsersResponse(w http.ResponseWriter) error
}

type PostUsers201JSONResponse UserDetails

func (response PostUsers201JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsers400Response struct {
}

func (response PostUsers400Response) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteUsersUserIdRequestObject struct {
	UserId string `json:"user_id"`
}

type DeleteUsersUserIdResponseObject interface {
	VisitDeleteUsersUserIdResponse(w http.ResponseWriter) error
}

type DeleteUsersUserId204Response struct {
}

func (response DeleteUsersUserId204Response) VisitDeleteUsersUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersUserId404Response struct {
}

func (response DeleteUsersUserId404Response) VisitDeleteUsersUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetUsersUserIdRequestObject struct {
	UserId string `json:"user_id"`
}

type GetUsersUserIdResponseObject interface {
	VisitGetUsersUserIdResponse(w http.ResponseWriter) error
}

type GetUsersUserId200JSONResponse UserDetails

func (response GetUsersUserId200JSONResponse) VisitGetUsersUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUserId404Response struct {
}

func (response GetUsersUserId404Response) VisitGetUsersUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchUsersUserIdRequestObject struct {
	UserId string `json:"user_id"`
	Body   *PatchUsersUserIdJSONRequestBody
}

type PatchUsersUserIdResponseObject interface {
	VisitPatchUsersUserIdResponse(w http.ResponseWriter) error
}

type PatchUsersUserId200JSONResponse UserDetails

func (response PatchUsersUserId200JSONResponse) VisitPatchUsersUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersUserId400Response struct {
}

func (response PatchUsersUserId400Response) VisitPatchUsersUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PatchUsersUserId404Response struct {
}

func (response PatchUsersUserId404Response) VisitPatchUsersUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetUsersUserIdCartsRequestObject struct {
	UserId string `json:"user_id"`
}

type GetUsersUserIdCartsResponseObject interface {
	VisitGetUsersUserIdCartsResponse(w http.ResponseWriter) error
}

type GetUsersUserIdCarts200JSONResponse []CartItem

func (response GetUsersUserIdCarts200JSONResponse) VisitGetUsersUserIdCartsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUserIdCarts404Response struct {
}

func (response GetUsersUserIdCarts404Response) VisitGetUsersUserIdCartsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostUsersUserIdCartsRequestObject struct {
	UserId string `json:"user_id"`
	Body   *PostUsersUserIdCartsJSONRequestBody
}

type PostUsersUserIdCartsResponseObject interface {
	VisitPostUsersUserIdCartsResponse(w http.ResponseWriter) error
}

type PostUsersUserIdCarts201JSONResponse CartItem

func (response PostUsersUserIdCarts201JSONResponse) VisitPostUsersUserIdCartsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersUserIdCarts400Response struct {
}

func (response PostUsersUserIdCarts400Response) VisitPostUsersUserIdCartsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostUsersUserIdCarts404Response struct {
}

func (response PostUsersUserIdCarts404Response) VisitPostUsersUserIdCartsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteUsersUserIdCartsProductIdRequestObject struct {
	UserId    string `json:"user_id"`
	ProductId string `json:"product_id"`
}

type DeleteUsersUserIdCartsProductIdResponseObject interface {
	VisitDeleteUsersUserIdCartsProductIdResponse(w http.ResponseWriter) error
}

type DeleteUsersUserIdCartsProductId204Response struct {
}

func (response DeleteUsersUserIdCartsProductId204Response) VisitDeleteUsersUserIdCartsProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersUserIdCartsProductId404Response struct {
}

func (response DeleteUsersUserIdCartsProductId404Response) VisitDeleteUsersUserIdCartsProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchUsersUserIdCartsProductIdRequestObject struct {
	UserId    string `json:"user_id"`
	ProductId string `json:"product_id"`
	Body      *PatchUsersUserIdCartsProductIdJSONRequestBody
}

type PatchUsersUserIdCartsProductIdResponseObject interface {
	VisitPatchUsersUserIdCartsProductIdResponse(w http.ResponseWriter) error
}

type PatchUsersUserIdCartsProductId200JSONResponse CartItem

func (response PatchUsersUserIdCartsProductId200JSONResponse) VisitPatchUsersUserIdCartsProductIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersUserIdCartsProductId400Response struct {
}

func (response PatchUsersUserIdCartsProductId400Response) VisitPatchUsersUserIdCartsProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PatchUsersUserIdCartsProductId404Response struct {
}

func (response PatchUsersUserIdCartsProductId404Response) VisitPatchUsersUserIdCartsProductIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetUsersUserIdOrdersRequestObject struct {
	UserId string `json:"user_id"`
}

type GetUsersUserIdOrdersResponseObject interface {
	VisitGetUsersUserIdOrdersResponse(w http.ResponseWriter) error
}

type GetUsersUserIdOrders200JSONResponse []Order

func (response GetUsersUserIdOrders200JSONResponse) VisitGetUsersUserIdOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUserIdOrders404Response struct {
}

func (response GetUsersUserIdOrders404Response) VisitGetUsersUserIdOrdersResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostUsersUserIdOrdersRequestObject struct {
	UserId string `json:"user_id"`
	Body   *PostUsersUserIdOrdersJSONRequestBody
}

type PostUsersUserIdOrdersResponseObject interface {
	VisitPostUsersUserIdOrdersResponse(w http.ResponseWriter) error
}

type PostUsersUserIdOrders201JSONResponse []OrderItem

func (response PostUsersUserIdOrders201JSONResponse) VisitPostUsersUserIdOrdersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersUserIdOrders400Response struct {
}

func (response PostUsersUserIdOrders400Response) VisitPostUsersUserIdOrdersResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostUsersUserIdOrders404Response struct {
}

func (response PostUsersUserIdOrders404Response) VisitPostUsersUserIdOrdersResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetUsersUserIdOrdersOrderIdRequestObject struct {
	UserId  string `json:"user_id"`
	OrderId string `json:"order_id"`
}

type GetUsersUserIdOrdersOrderIdResponseObject interface {
	VisitGetUsersUserIdOrdersOrderIdResponse(w http.ResponseWriter) error
}

type GetUsersUserIdOrdersOrderId200JSONResponse []OrderItem

func (response GetUsersUserIdOrdersOrderId200JSONResponse) VisitGetUsersUserIdOrdersOrderIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUserIdOrdersOrderId404Response struct {
}

func (response GetUsersUserIdOrdersOrderId404Response) VisitGetUsersUserIdOrdersOrderIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Create a new user
	// (POST /users)
	PostUsers(ctx context.Context, request PostUsersRequestObject) (PostUsersResponseObject, error)
	// Delete user by ID
	// (DELETE /users/{user_id})
	DeleteUsersUserId(ctx context.Context, request DeleteUsersUserIdRequestObject) (DeleteUsersUserIdResponseObject, error)
	// Get user by ID
	// (GET /users/{user_id})
	GetUsersUserId(ctx context.Context, request GetUsersUserIdRequestObject) (GetUsersUserIdResponseObject, error)
	// Update user by ID
	// (PATCH /users/{user_id})
	PatchUsersUserId(ctx context.Context, request PatchUsersUserIdRequestObject) (PatchUsersUserIdResponseObject, error)
	// Get all user`s cart products
	// (GET /users/{user_id}/carts)
	GetUsersUserIdCarts(ctx context.Context, request GetUsersUserIdCartsRequestObject) (GetUsersUserIdCartsResponseObject, error)
	// Add product to cart
	// (POST /users/{user_id}/carts)
	PostUsersUserIdCarts(ctx context.Context, request PostUsersUserIdCartsRequestObject) (PostUsersUserIdCartsResponseObject, error)
	// Delete product from cart
	// (DELETE /users/{user_id}/carts/{product_id})
	DeleteUsersUserIdCartsProductId(ctx context.Context, request DeleteUsersUserIdCartsProductIdRequestObject) (DeleteUsersUserIdCartsProductIdResponseObject, error)
	// Update cart-item quantity
	// (PATCH /users/{user_id}/carts/{product_id})
	PatchUsersUserIdCartsProductId(ctx context.Context, request PatchUsersUserIdCartsProductIdRequestObject) (PatchUsersUserIdCartsProductIdResponseObject, error)
	// Get all user`s orders
	// (GET /users/{user_id}/orders)
	GetUsersUserIdOrders(ctx context.Context, request GetUsersUserIdOrdersRequestObject) (GetUsersUserIdOrdersResponseObject, error)
	// Order from cart
	// (POST /users/{user_id}/orders)
	PostUsersUserIdOrders(ctx context.Context, request PostUsersUserIdOrdersRequestObject) (PostUsersUserIdOrdersResponseObject, error)
	// Get order by ID
	// (GET /users/{user_id}/orders/{order_id})
	GetUsersUserIdOrdersOrderId(ctx context.Context, request GetUsersUserIdOrdersOrderIdRequestObject) (GetUsersUserIdOrdersOrderIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx echo.Context) error {
	var request GetUsersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx.Request().Context(), request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		return validResponse.VisitGetUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUsers operation middleware
func (sh *strictHandler) PostUsers(ctx echo.Context) error {
	var request PostUsersRequestObject

	var body PostUsersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsers(ctx.Request().Context(), request.(PostUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersResponseObject); ok {
		return validResponse.VisitPostUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersUserId operation middleware
func (sh *strictHandler) DeleteUsersUserId(ctx echo.Context, userId string) error {
	var request DeleteUsersUserIdRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersUserId(ctx.Request().Context(), request.(DeleteUsersUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersUserIdResponseObject); ok {
		return validResponse.VisitDeleteUsersUserIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsersUserId operation middleware
func (sh *strictHandler) GetUsersUserId(ctx echo.Context, userId string) error {
	var request GetUsersUserIdRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersUserId(ctx.Request().Context(), request.(GetUsersUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersUserIdResponseObject); ok {
		return validResponse.VisitGetUsersUserIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchUsersUserId operation middleware
func (sh *strictHandler) PatchUsersUserId(ctx echo.Context, userId string) error {
	var request PatchUsersUserIdRequestObject

	request.UserId = userId

	var body PatchUsersUserIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchUsersUserId(ctx.Request().Context(), request.(PatchUsersUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchUsersUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchUsersUserIdResponseObject); ok {
		return validResponse.VisitPatchUsersUserIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsersUserIdCarts operation middleware
func (sh *strictHandler) GetUsersUserIdCarts(ctx echo.Context, userId string) error {
	var request GetUsersUserIdCartsRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersUserIdCarts(ctx.Request().Context(), request.(GetUsersUserIdCartsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersUserIdCarts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersUserIdCartsResponseObject); ok {
		return validResponse.VisitGetUsersUserIdCartsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUsersUserIdCarts operation middleware
func (sh *strictHandler) PostUsersUserIdCarts(ctx echo.Context, userId string) error {
	var request PostUsersUserIdCartsRequestObject

	request.UserId = userId

	var body PostUsersUserIdCartsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersUserIdCarts(ctx.Request().Context(), request.(PostUsersUserIdCartsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersUserIdCarts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersUserIdCartsResponseObject); ok {
		return validResponse.VisitPostUsersUserIdCartsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersUserIdCartsProductId operation middleware
func (sh *strictHandler) DeleteUsersUserIdCartsProductId(ctx echo.Context, userId string, productId string) error {
	var request DeleteUsersUserIdCartsProductIdRequestObject

	request.UserId = userId
	request.ProductId = productId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersUserIdCartsProductId(ctx.Request().Context(), request.(DeleteUsersUserIdCartsProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersUserIdCartsProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersUserIdCartsProductIdResponseObject); ok {
		return validResponse.VisitDeleteUsersUserIdCartsProductIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchUsersUserIdCartsProductId operation middleware
func (sh *strictHandler) PatchUsersUserIdCartsProductId(ctx echo.Context, userId string, productId string) error {
	var request PatchUsersUserIdCartsProductIdRequestObject

	request.UserId = userId
	request.ProductId = productId

	var body PatchUsersUserIdCartsProductIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchUsersUserIdCartsProductId(ctx.Request().Context(), request.(PatchUsersUserIdCartsProductIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchUsersUserIdCartsProductId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchUsersUserIdCartsProductIdResponseObject); ok {
		return validResponse.VisitPatchUsersUserIdCartsProductIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsersUserIdOrders operation middleware
func (sh *strictHandler) GetUsersUserIdOrders(ctx echo.Context, userId string) error {
	var request GetUsersUserIdOrdersRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersUserIdOrders(ctx.Request().Context(), request.(GetUsersUserIdOrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersUserIdOrders")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersUserIdOrdersResponseObject); ok {
		return validResponse.VisitGetUsersUserIdOrdersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostUsersUserIdOrders operation middleware
func (sh *strictHandler) PostUsersUserIdOrders(ctx echo.Context, userId string) error {
	var request PostUsersUserIdOrdersRequestObject

	request.UserId = userId

	var body PostUsersUserIdOrdersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsersUserIdOrders(ctx.Request().Context(), request.(PostUsersUserIdOrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsersUserIdOrders")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUsersUserIdOrdersResponseObject); ok {
		return validResponse.VisitPostUsersUserIdOrdersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsersUserIdOrdersOrderId operation middleware
func (sh *strictHandler) GetUsersUserIdOrdersOrderId(ctx echo.Context, userId string, orderId string) error {
	var request GetUsersUserIdOrdersOrderIdRequestObject

	request.UserId = userId
	request.OrderId = orderId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersUserIdOrdersOrderId(ctx.Request().Context(), request.(GetUsersUserIdOrdersOrderIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersUserIdOrdersOrderId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersUserIdOrdersOrderIdResponseObject); ok {
		return validResponse.VisitGetUsersUserIdOrdersOrderIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
